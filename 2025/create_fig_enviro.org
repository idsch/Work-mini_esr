#+latex_header: \usepackage{natbib}
#+options: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: ^:nil
#+latex_header: \hypersetup{colorlinks=true,linkcolor=blue}
#+LATEX_HEADER: \usepackage{enumitem}
#+TITLE: Create Environmental Figures for Mini-ESR
#+AUTHOR: Isaac D. Schroeder
#+ATTR_LATEX: :options [noitemsep]
#+bibliography: /home/isaac/Documents/org_ref/references.bib


* Background
Compile code for creating figures for a mini-ESR.
The mini-ESR is expected to be produced before the ESR and will have current conditions.
The environmental figures will need to be "automated".

* Code BEUTI time x lat anoms
+ <2025-07-10 Thu>
+ Show monthly BEUTI anomalies over the lat five years, over latitudes 30-47N.
+ This plot uses data download from https://mjacox.com/upwelling-indices/


1. [@1] Code1, create monthly netcdf <<code1>>
  + <2025-07-10 Thu>
  + Download Mike J's daily BEUTI netcdf for the most current data and create monthly and cumulative dataarrays.
  + Steps involved before running this code, download the daily BEUTI_daily.nc(2.2M); I download the data by visiting the website.
  + Input: daily BEUTI_daily.nc(2.2M) (external website)
  + Output: monthly BEUTI_monthly.nc (72k)
  + create_daily_monthly_timeseries.py
  + *Note* org babel tangle source code file found at:\\
    [[/Users/isaacschroeder/Work/mini_esr/2025/create_daily_monthly_timeseries.py]]\\
    https://github.com/idsch/Work-mini_esr/blob/main/2025/create_daily_monthly_timeseries.py
#+STARTUP: nofold
#+STARTUP: hideblocks
#+NAME: create_daily_monthly_timeseries
#+BEGIN_SRC python :eval never :results none :exports none :async t :tangle create_daily_monthly_timeseries.py :session Python
import os
import numpy as np
import xarray as xr
import pandas as pd
# import matplotlib as mpl
# pylint: disable=C0103


# Note: M-x pyvenv-workon py_cart
#       This creates daily, monthly means and cui_mtrx from the daily BEUTI data
#       Save it to netcdf file
# Note: Daily BEUTI data downloaded from Mike J site

# -------------------------------------------------------
# -- Input variables, change these
# -------------------------------------------------------
# set lat range
lat_bgn = 31
lat_end = 47
dlat = 1

# directory of the 6hr UI
dir_data = '~/Work/TS/data/new_ui/beuti/'
fn_data = 'BEUTI_daily.nc'

# variable name in the xr.ds
ds1_var = ['year', 'month', 'day', 'BEUTI']
ds1_coord = ['latitude', 'time']

# input netcdf file are daily data, set the minumum number of days
# in the last month to create a monthly mean, otherwise report NaN
ndm_cutoff = 15

# -------------------------------------------------------
# -- END: Input variables, change these
# -------------------------------------------------------

ds1 = xr.open_dataset('{}{}'.format(dir_data, fn_data))

# create proper time coord
year = ds1[ds1_var[0]].data
month = ds1[ds1_var[1]].data
day = ds1[ds1_var[2]].data

yrs = np.unique(year)
num_yrs = len(yrs)

# create dictionary of dates
time_dic = {}
time_dic[ds1_var[0]] = year
time_dic[ds1_var[1]] = month
time_dic[ds1_var[2]] = day

# time pd.dataframe
df_vec = pd.DataFrame(time_dic)
pd_dt = pd.DatetimeIndex(pd.to_datetime(df_vec[ds1_var[0:3]]))
dt_vec = pd.DatetimeIndex(pd.to_datetime(df_vec[ds1_var[0:3]])).values

# lat range
lat_rng = np.arange(lat_bgn, lat_end+1, dlat)
num_lat_rng = len(lat_rng)

# get index of lat range
cc, ia_lat, ib_lat = np.intersect1d(
    ds1[ds1_coord[0]].data, lat_rng, return_indices=True)

# daily matrix
dataD_mtrx = ds1[ds1_var[3]].data[:, ia_lat].T

# monthly matrix
da1 = xr.DataArray(ds1[ds1_var[3]].data[:, ia_lat], coords=[
                   dt_vec, lat_rng], dims=['time', 'latitude'])
da1M = da1.resample(time='M').mean('time')
dataM_mtrx = da1M.data.T
dateM = da1M.time.data.astype('datetime64[M]')

# check to see if number of days in last month is less than ndm_cutoff
ndm_last_mon = pd_dt.day.values[-1]
if ndm_last_mon < ndm_cutoff:
    dataM_mtrx[:, -1] = np.nan

# create CUI matrix
dateD_yy = da1.time.dt.year.data
cui_mtrx = np.zeros([num_lat_rng, num_yrs, 365])
for i in range(0, num_lat_rng):
    for j in range(0, num_yrs):
        in_yr = np.where(dateD_yy == yrs[j])[0]
        ui_yr = dataD_mtrx[i, in_yr].T
        # --check size of in_yr, can be 365, 366 or
        # --less (depending on mon_wnt1,mon_wnt2)
        num_in = np.size(in_yr)

        in_end = 365
        if num_in < in_end:
            in_end = num_in-1

        # calculate cui on the first 365 days
        ui_365 = np.zeros(365)*np.nan
        ui_365[0:in_end] = ui_yr[0:in_end]
        cui = np.nancumsum(ui_365)

        # nancumsum treats NaN as 0, but want NaN in output
        in_nan = np.isnan(ui_365)
        cui[in_nan] = np.nan

        # place in final matrix
        cui_mtrx[i, j, :] = cui

# put into xr.da
da1 = xr.DataArray(dataD_mtrx, coords=[lat_rng, dt_vec], dims=['lat', 'time'])
da2 = xr.DataArray(dataM_mtrx, coords=[lat_rng, dateM.astype(
    'datetime64[ns]')], dims=['lat', 'time'])
days = np.arange(1, 366)
da3 = xr.DataArray(cui_mtrx, coords=[lat_rng, yrs, days],
                   dims=['lat', 'year', 'days'])

# put into xr.ds
ds1_out = da1.to_dataset(name='ui_day')
ds2_out = da2.to_dataset(name='ui_mon')
ds3_out = da3.to_dataset(name='cui_mtrx')

# # --create output directory
pwd1 = os.getcwd()

# dir_home = pwd1[0:22]
# dir1 = dir_home + 'data_files' + pwd1[21:len(pwd1)]
# dir_out = dir1

# # --check if directory exist, if it doesn't then create
# try:
#     os.makedirs(dir_out)
# except OSError:
#     if not os.path.isdir(dir_out):
#         raise

# # --Save Dataset to a netcdf file
dir_out = './'
# fn1_nc = '{}/BEUTI_daily.nc'.format(dir_out)
# ds1_out.to_netcdf(fn1_nc)

fn2_nc = '{}/BEUTI_monthly.nc'.format(dir_out)
ds2_out.to_netcdf(fn2_nc)

# fn3_nc = '{}/BEUTI_cui_mtrx.nc'.format(dir_out)
# ds3_out.to_netcdf(fn3_nc)

#+END_SRC

2. [@2] Code2, make plot from monthly netcdf
   + <2025-07-11 Fri>
   + Use the netcdf created using [[code1][Code1]].
   + Calculate anoms and create the time x lat plot.
   + Input: BEUTI_monthl.nc (72k) ([[code1][Code1]])
   + Output: contour_beuti_anom_lat_31_47.png (486k)
   + contour_beuti_anom_time_lat.py
   + *Note* org babel tangle source code file found at:\\
     [[/Users/isaacschroeder/Work/mini_esr/2025/contour_beuti_anom_time_lat.py]]\\
     https://github.com/idsch/Work-mini_esr/blob/main/2025/contour_beuti_anom_time_lat.py
#+STARTUP: nofold
#+STARTUP: hideblocks
#+NAME: contour_beuti_anom_time_lat
#+BEGIN_SRC python :eval never :results none :exports none :async t :tangle contour_beuti_anom_time_lat.py :session Python
import xarray as xr
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import calendar
from matplotlib import gridspec
from matplotlib import rcParams
from matplotlib import interactive
interactive(True)
# pylint: disable=C0103



# plot paramaters
params = {
    'text.latex.preamble': '\\usepackage{gensymb}',
    'image.origin': 'lower',
    'image.interpolation': 'nearest',
    'image.cmap': 'RdYlBu_r',
    'axes.grid': False,
    'savefig.dpi': 300,  # to adjust notebook inline plot size
    'xtick.top':        False,  # shold the top and bottom have tick marks
    'xtick.bottom':     True,
    'xtick.major.size': 2.5,
    'ytick.major.size': 2.5,
    'ytick.direction': 'out',
    'xtick.direction': 'out',
    'axes.labelsize': 12,  # fontsize for x and y labels 
    'axes.titlesize': 12,
    'font.size': 12,  # was 10
    'legend.fontsize': 12,  # was 10
    'xtick.labelsize': 12,
    'ytick.labelsize': 12,
    'figure.figsize': [8.5, 11],
    'font.family': 'STIXGeneral',
    'toolbar': 'None',
    'savefig.bbox': 'tight',
    'axes.spines.top': True,
    'axes.spines.bottom': True,
    'axes.spines.left': True,
    'axes.spines.right': True,
    'font.family': 'Arial',
}
rcParams.update(params)


class nf(float):
    def __repr__(self):
        str = '%.1f' % (self.__float__(),)
        if str[-1] == '0':
            return '%.0f' % self.__float__()
        else:
            return '%.1f' % self.__float__()


# -------------------------------------------------------
# -- Input variables, change these
# -------------------------------------------------------

# clim year perio
yr_clim_bgn = 1982
yr_clim_end = 2010

# end year
yr_end = 2025

# dir_out for plots
dir_out = './'

# lats of the sst data
lat_wnt = [31, 47]

# distance want
dis_wnt = [0, 75]
# dis_wnt = [0, 150]


# file name of the BEUTI data
dir_in = './'
fn_beuti = '{}BEUTI_monthly.nc'.format(dir_in)

# roms variable name in the xr.ds
var_roms = ['sst_oi']

# beuti variable name in the xr.ds
var_beuti = ['ui_mon']

# roms dimensions labels
dim_roms = ['time', 'latitude', 'longitude']

# beuti dimensions labels
dim_beuti = ['lat', 'time']

# dim of the final anomaly xr.da
dim_da = ['lat', 'time']
dim_da_sst = ['latitude', 'time']

# figure usually has 1 columns, 2 rows
num_clmn = 1
num_row = 2

# ylim and ticks
ylm = [31, 47]
y_tck = np.arange(ylm[0], ylm[1]+3, 3)

# CalCOFI figures usually focus discussion over the last 3 years, change
# if more years are wanted
num_xyrs = 5
# num_xyrs = 28

# color for the xyrs
color_xyrs = ['green', 'orange', 'dodgerblue', 'red']

# figure size
fig_wdth = 8.5
fig_hght = 6

# nlevels
d_beuti = 3
dmin_beuti = -18
dmax_beuti = 18
nlvl_beuti = np.arange(dmin_beuti-6*d_beuti, dmax_beuti+7*d_beuti, d_beuti)
nlvl_beuti1 = np.arange(dmin_beuti-1*d_beuti, dmax_beuti+2*d_beuti, 2*d_beuti)

# colorbar labelsb
clrbr_lbl_beuti = 'BEUTI Anoms (mmol s^-1 m^-1)'

# month begin and end
month_bgn = 1
month_end = 12

# -------------------------------------------------------
# -- END: Input variables, change these
# -------------------------------------------------------

# beuti xr.ds
ds_beuti = xr.open_dataset(fn_beuti)

# get xr.da with sst and beuti data
da_beuti = ds_beuti[var_beuti[0]]

# beuti anom
in_clim_beuti = np.logical_and(
    da_beuti.time.dt.year >= yr_clim_bgn, da_beuti.time.dt.year <= yr_clim_end)
beuti_clim = da_beuti[:, in_clim_beuti].groupby('time.month').mean('time')
beuti_anom = da_beuti.groupby('time.month') - beuti_clim

# x limit
yr_bgn = yr_end - num_xyrs + 1
x_bgn = '{}-{:02d}'.format(yr_bgn, month_bgn)
x_end = '{}-{:02d}'.format(yr_end, month_end)
xlm = [np.datetime64(x_bgn), np.datetime64(x_end)]

# vlines
vln = np.zeros(num_xyrs, dtype='datetime64[M]')
for i in range(0, num_xyrs-1):
    vln[i] = '{}-01'.format(yr_bgn+1+i)

# setup subplots, spacing and figure size
plt.close()
gs1 = gridspec.GridSpec(num_row, num_clmn)
gs1.update(left=0.05, right=0.85, bottom=0.05, top=0.9, wspace=0.1, hspace=0.1)
fig = plt.figure(figsize=(fig_wdth, fig_hght))

# ------------------------------------------------------------
# contour beuti anom
# ------------------------------------------------------------
# setup subplots, spacing and figure size
plt.close()
gs1 = gridspec.GridSpec(num_row, num_clmn)
gs1.update(left=0.05, right=0.85, bottom=0.05, top=0.9, wspace=0.1, hspace=0.1)
fig = plt.figure(figsize=(fig_wdth, fig_hght))



ax = fig.add_subplot(gs1[0])
x_beuti = beuti_anom[dim_da[1]].data.astype('datetime64[M]')
y_beuti = beuti_anom[dim_da[0]].data

# contour
CS = plt.contour(x_beuti, y_beuti, beuti_anom.data, nlvl_beuti1,
                 vmin=dmin_beuti, vmax=dmax_beuti, colors='gray', linewidths=0.5)
# Define a class that forces representation of float to look a certain way
# This remove trailing zero so '1.0' becomes '1'

# Recast levels to new class
CS.levels = [nf(val) for val in CS.levels]

labels1 = plt.clabel(CS, CS.levels, inline=False, fmt='%r',
                     fontsize=7, colors='k', rightside_up=True)

# rotate and change integers (ie 1.0) to whole number (ie 1)
# for l in labels1:
#     txt1 = l.get_text()
#     if float(txt1).is_integer():
#         l.set_text(txt1.split('.')[0])
#     l.set_rotation(0)

# contourf
dmin = np.ceil(np.nanmin(beuti_anom.data))
dmax = np.ceil(np.nanmax(beuti_anom.data))
lvl1 = np.arange(dmin, dmax+0.5, 0.5)

chck_min = 0
chck_max = 0
if dmin < dmin_beuti:
    chck_min = 1
    extnd1 = 'min'
if dmax > dmax_beuti:
    chck_max = 1
    extnd1 = 'max'
if chck_max+chck_min==2:
    extnd1 = 'both'

# dminmax = np.min([np.abs(dmin), dmax])
# dmin = -1*dminmax
# dmax = dminmax


plt.contourf(x_beuti, y_beuti, beuti_anom.data, lvl1,
             vmin=dmin_beuti, vmax=dmax_beuti, cmap='bwr')

# xtick labels
mon_lbl = list()
for i in x_beuti:
    dti = pd.to_datetime(i)
    moni = calendar.month_name[dti.month]
    if moni == 'January':
        mon_lbl.append('{}\n      {}'.format(moni[0], dti.year))
    else:
        mon_lbl.append(moni[0])
plt.xticks(x_beuti, mon_lbl, fontsize=7)

# ytick labesl
lat_lbl = list()
for i in y_tck:
    lat_lbl.append('{}$\degree$N'.format(i))
plt.yticks(y_tck, lat_lbl, fontsize=7)

# x, y limits
plt.xlim(xlm)
plt.ylim(ylm)

# vlines
plt.vlines(vln, ylm[0], ylm[1], colors='red', linestyles='dashed', linewidth=2)

# colorbar
ax_pos = ax.get_position()
x_cb = ax_pos.x0 + ax_pos.width + ax_pos.width/40.0
y_cb = ax_pos.y0
y_hght = ax_pos.height
cbaxes = plt.gcf().add_axes([x_cb, y_cb+(y_hght*0.1)/2.0, 0.005, y_hght*0.9])

m = plt.cm.ScalarMappable(cmap='bwr')
m.set_array(beuti_anom.data)
m.set_clim(dmin_beuti, dmax_beuti)
plt.colorbar(m, cax=cbaxes, label=clrbr_lbl_beuti,
             format='%4.1f', extend=extnd1,
             boundaries=np.arange(dmin_beuti, dmax_beuti+d_beuti, d_beuti))


# save figure
fn_fig = '{}contour_beuti_anom_lat_{}_{}.png'.format(dir_out, lat_wnt[0], lat_wnt[1])

plt.savefig(fn_fig)

#+END_SRC




* Results

+ Fig [[fg1]], BEUTI anoms for the last-five years over 31-48N.
* References 
#+PRINT_BIBLIOGRAPHY:

#+latex: \clearpage
* Figures
#+NAME: fg1
#+caption:
#+caption: Figure created with contour_beuti_anom_time_lat.py code.
[[file:contour_beuti_anom_lat_31_47.png]]
